In your fourth and the final homework assignment you will solidify the knowledge of lambda-calculus by designing and implementing an untyped lambda-calculus interpreter. Your goal is to gain experience with the fundamentals of the functional programming languages and to understand reduction and conversion rules of the lambda calculus. You will implement your lambda interpreter in Scala and you will build and RUN your project using the SBT with the runMain command from the command line. In your lambda interpreter, you will use the reserved keyword lambda for designating the Greek letter lambda. You will define the rules for creating valid names (e.g., what characters they can contain, can the names start with a digit) using a regular expression. You will use the latest community version of IntelliJ IDE for this assignment.

WARNING: there are several implementations of lambda-calculus in Scala on the Internet. I know about (almost) all of them. You are ok to learn by studying these implementations and feel free to use the ideas in your own implementation, and you must acknowledge what you used in your README. However, blindly copying large parts of some existing implementation in your code will result in receiving the grade F for the entire course with the transfer of your case of plagiarism to the Dean of Students Office, which will be followed with severe penalties. Most likely, you will be suspended or complete dismissed from the program in the worst case. Please do not plagiarize existing implementations, it is not worth it!

The input to your interpreter is a lambda expression (e.g., (lambda x.(lambda y.(x y))3)square). Your interpreter will show a command line prompt and it will wait for a lambda expression.

Once entered, the interpreter will parse the input lambda expression and output the derivations with all intermediate steps.

For example, for the expression (lambda x.(lambda y.(x y))3)square the output may look like the following:
    (lambda x.(lambda y.(x y))3)square
    (lambda x.(lambda y.(x y))3)square => substituting square for x:
    (lambda y.(square y))3 => substituting 3 for y:
    (square 3) => no further reduction is possible:
    (square 3)

To handle infinite recursion, like in the case of self-application function, you must determine if a derivation results in a lambda expression that appeared already in a previous derivation and it will be the final output derivation.

The output should specify what type of conversion your interpreter is applying (i.e., alpha, beta, eta).

You will have a debugging or a verbose mode (with the -d or -v option for your interpreter), in which the interpreter will output additional information about all bound and free names, the order of evaluation, and all additional information that you may find relevant to the users.

Error messages should be informative and descriptive (e.g., "malformed lambda expression: closing parentheses do not match opening parentheses").






(\m.\n.\f.\x.m f (n f x)) (\f.\x.f x) (\f.\x.f (f x))